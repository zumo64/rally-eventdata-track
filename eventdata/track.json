{# Define variables to use throughout the template #}

{# Maximum number of indexing threads to use #}
{% set clients = 26 %}

{# Rate limit steps (ops) for combined indexing and querying #}
{% set rate_limit_ops = [2,4,6,8,10,12,14,16,18,20,22,24,26,28,30] %}

{# Duration of each rate limited indexing and querying benchmark in seconds #}
{% set rate_limit_duration_secs = 1200 %}

{# Number of primary shards and replicas to index into #}
{% set shard_count = 16 %}
{% set replica_count = 1 %}

{% set shard_sizing_iterations = 25 %}
{% set shard_sizing_queries = 20 %}

{% import "rally.helpers" as rally with context %}

{
  "meta": {
    "short-description": "Track for simulating different aspects of event-based use cases.",
    "description": "This track contains data generators and associated queries and aggregations to allow simulation of event-based use cases."
  },
  "indices": [
    {
      "name": "elasticlogs",
      "types": [
        {
          "name": "logs",
          "mapping": "mappings.json"
        }
      ]
    }
  ],
  "#COMMENT": "'operations' just define all possible operations but this is not the actual execution schedule. The execution is defined in the 'challenges' block and it just refers to the defined operations. The intention between this separation is to allow reuse of operations",
  "operations": [
    {{ rally.collect(parts="operations/*.json") }}
  ],
  "challenges": [
    {
      "name": "append-no-conflicts",
      "default": true,
      "description": "Runs indexing with a batch size of 1000 for 20 minutes. IDs are autogenerated by Elasticsearch, meaning there are no conflicts.",
      "index-settings": {
        "index.number_of_replicas": {{ replica_count }},
        "index.number_of_shards": {{ shard_count }}
      },
      "meta": {
        "client_count": {{ clients }}
      },
      "schedule": [
        {
          "operation": "index-append-5000",
          "warmup-time-period": 0,
          "time-period": 300,
          "clients": {{ clients }}
        }
      ]
    },
    {{ rally.collect(parts="challenges/*.json") }}
  ]
}
